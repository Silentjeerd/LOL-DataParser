Index: LoLparser/CSVs/Items.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>itemID,itemName\r\n1001,Boots of Speed\r\n1004,Faerie Charm\r\n1006,Rejuvenation Bead\r\n1011,Giant's Belt\r\n1018,Cloak of Agility\r\n1026,Blasting Wand\r\n1027,Sapphire Crystal\r\n1028,Ruby Crystal\r\n1029,Cloth Armor\r\n1031,Chain Vest\r\n1033,Null-Magic Mantle\r\n1036,Long Sword\r\n1037,Pickaxe\r\n1038,B. F. Sword\r\n1039,Hunter's Talisman\r\n1041,Hunter's Machete\r\n1042,Dagger\r\n1043,Recurve Bow\r\n1052,Amplifying Tome\r\n1053,Vampiric Scepter\r\n1054,Doran's Shield\r\n1055,Doran's Blade\r\n1056,Doran's Ring\r\n1057,Negatron Cloak\r\n1058,Needlessly Large Rod\r\n1082,Dark Seal\r\n1083,Cull\r\n1400,Enchantment: Warrior\r\n1401,Enchantment: Cinderhulk\r\n1402,Enchantment: Runic Echoes\r\n1412,Enchantment: Warrior\r\n1413,Enchantment: Cinderhulk\r\n1414,Enchantment: Runic Echoes\r\n1416,Enchantment: Bloodrazor\r\n1419,Enchantment: Bloodrazor\r\n2003,Health Potion\r\n2006,Showdown Health Potion\r\n2009,Total Biscuit of Rejuvenation\r\n2010,Total Biscuit of Everlasting Will\r\n2015,Kircheis Shard\r\n2031,Refillable Potion\r\n2033,Corrupting Potion\r\n2047,Oracle's Extract\r\n2051,Guardian's Horn\r\n2052,Poro-Snax\r\n2054,Diet Poro-Snax\r\n2055,Control Ward\r\n2065,Shurelya's Reverie\r\n2138,Elixir of Iron\r\n2139,Elixir of Sorcery\r\n2140,Elixir of Wrath\r\n2403,Minion Dematerializer\r\n2419,Commencing Stopwatch\r\n2420,Stopwatch\r\n2421,Broken Stopwatch\r\n2422,Slightly Magical Boots\r\n2423,Perfectly Timed Stopwatch\r\n2424,Broken Stopwatch\r\n3001,Abyssal Mask\r\n3003,Archangel's Staff\r\n3004,Manamune\r\n3006,Berserker's Greaves\r\n3007,Archangel's Staff (Quick Charge)\r\n3008,Manamune (Quick Charge)\r\n3009,Boots of Swiftness\r\n3010,Catalyst of Aeons\r\n3020,Sorcerer's Shoes\r\n3022,Frozen Mallet\r\n3024,Glacial Shroud\r\n3025,Iceborn Gauntlet\r\n3026,Guardian Angel\r\n3027,Rod of Ages\r\n3028,Chalice of Harmony\r\n3029,Rod of Ages (Quick Charge)\r\n3030,Hextech GLP-800\r\n3031,Infinity Edge\r\n3033,Mortal Reminder\r\n3035,Last Whisper\r\n3036,Lord Dominik's Regards\r\n3040,Seraph's Embrace\r\n3041,Mejai's Soulstealer\r\n3042,Muramana\r\n3043,Muramana\r\n3044,Phage\r\n3046,Phantom Dancer\r\n3047,Ninja Tabi\r\n3048,Seraph's Embrace\r\n3050,Zeke's Convergence\r\n3052,Jaurim's Fist\r\n3053,Sterak's Gage\r\n3057,Sheen\r\n3065,Spirit Visage\r\n3067,Kindlegem\r\n3068,Sunfire Cape\r\n3070,Tear of the Goddess\r\n3071,Black Cleaver\r\n3072,Bloodthirster\r\n3073,Tear of the Goddess (Quick Charge)\r\n3074,Ravenous Hydra\r\n3075,Thornmail\r\n3076,Bramble Vest\r\n3077,Tiamat\r\n3078,Trinity Force\r\n3082,Warden's Mail\r\n3083,Warmog's Armor\r\n3084,Overlord's Bloodmail\r\n3085,Runaan's Hurricane\r\n3086,Zeal\r\n3087,Statikk Shiv\r\n3089,Rabadon's Deathcap\r\n3091,Wit's End\r\n3094,Rapid Firecannon\r\n3095,Stormrazor\r\n3100,Lich Bane\r\n3101,Stinger\r\n3102,Banshee's Veil\r\n3105,Aegis of the Legion\r\n3107,Redemption\r\n3108,Fiendish Codex\r\n3109,Knight's Vow\r\n3110,Frozen Heart\r\n3111,Mercury's Treads\r\n3112,Guardian's Orb\r\n3113,Aether Wisp\r\n3114,Forbidden Idol\r\n3115,Nashor's Tooth\r\n3116,Rylai's Crystal Scepter\r\n3117,Boots of Mobility\r\n3123,Executioner's Calling\r\n3124,Guinsoo's Rageblade\r\n3133,Caulfield's Warhammer\r\n3134,Serrated Dirk\r\n3135,Void Staff\r\n3136,Haunting Guise\r\n3137,Dervish Blade\r\n3139,Mercurial Scimitar\r\n3140,Quicksilver Sash\r\n3142,Youmuu's Ghostblade\r\n3143,Randuin's Omen\r\n3144,Bilgewater Cutlass\r\n3145,Hextech Revolver\r\n3146,Hextech Gunblade\r\n3147,Duskblade of Draktharr\r\n3151,Liandry's Torment\r\n3152,Hextech Protobelt-01\r\n3153,Blade of the Ruined King\r\n3155,Hexdrinker\r\n3156,Maw of Malmortius\r\n3157,Zhonya's Hourglass\r\n3158,Ionian Boots of Lucidity\r\n3161,Spear of Shojin\r\n3165,Morellonomicon\r\n3174,Athene's Unholy Grail\r\n3175,Head of Kha'Zix\r\n3179,Umbral Glaive\r\n3181,Sanguine Blade\r\n3184,Guardian's Hammer\r\n3190,Locket of the Iron Solari\r\n3191,Seeker's Armguard\r\n3193,Gargoyle Stoneplate\r\n3194,Adaptive Helm\r\n3196,Hex Core mk-1\r\n3197,Hex Core mk-2\r\n3198,Perfect Hex Core\r\n3200,Prototype Hex Core\r\n3211,Spectre's Cowl\r\n3222,Mikael's Crucible\r\n3285,Luden's Echo\r\n3340,Warding Totem (Trinket)\r\n3348,Arcane Sweeper\r\n3361,Greater Stealth Totem (Trinket)\r\n3362,Greater Vision Totem (Trinket)\r\n3363,Farsight Alteration\r\n3364,Oracle Lens\r\n3371,Molten Edge\r\n3373,Forgefire Cape\r\n3374,Rabadon's Deathcrown\r\n3379,Infernal Mask\r\n3380,Obsidian Cleaver\r\n3382,Salvation\r\n3383,Circlet of the Iron Solari\r\n3384,Trinity Fusion\r\n3386,Zhonya's Paradox\r\n3387,Frozen Fist\r\n3388,Youmuu's Wraithblade\r\n3389,Might of the Ruined King\r\n3390,Luden's Pulse\r\n3400,'Your Cut'\r\n3410,Head of Kha'Zix\r\n3416,Head of Kha'Zix\r\n3422,Head of Kha'Zix\r\n3455,Head of Kha'Zix\r\n3504,Ardent Censer\r\n3508,Essence Reaver\r\n3513,Eye of the Herald\r\n3514,Eye of the Herald\r\n3520,Ghost Poro\r\n3599,Black Spear\r\n3600,Black Spear\r\n3671,Enchantment: Warrior\r\n3672,Enchantment: Cinderhulk\r\n3673,Enchantment: Runic Echoes\r\n3675,Enchantment: Bloodrazor\r\n3680,Frosted Snax\r\n3681,Super Spicy Snax\r\n3682,Espresso Snax\r\n3683,Rainbow Snax Party Pack!\r\n3684,Dawnbringer Snax\r\n3685,Nightbringer Snax\r\n3690,Cosmic Shackle\r\n3691,Singularity Lantern\r\n3692,Dark Matter Scythe\r\n3693,Gravity Boots\r\n3694,Cloak of Stars\r\n3695,Dark Star Sigil\r\n3706,Stalker's Blade\r\n3715,Skirmisher's Sabre\r\n3742,Dead Man's Plate\r\n3748,Titanic Hydra\r\n3751,Bami's Cinder\r\n3800,Righteous Glory\r\n3801,Crystalline Bracer\r\n3802,Lost Chapter\r\n3812,Death's Dance\r\n3814,Edge of Night\r\n3850,Spellthief's Edge\r\n3851,Frostfang\r\n3853,Shard of True Ice\r\n3854,Steel Shoulderguards\r\n3855,Runesteel Spaulders\r\n3857,Pauldrons of Whiterock\r\n3858,Relic Shield\r\n3859,Targon's Buckler\r\n3860,Bulwark of the Mountain\r\n3862,Spectral Sickle\r\n3863,Harrowing Crescent\r\n3864,Black Mist Scythe\r\n3901,Fire at Will\r\n3902,Death's Daughter\r\n3903,Raise Morale\r\n3905,Twin Shadows\r\n3907,Spellbinder\r\n3916,Oblivion Orb\r\nitemID,itemName\r\n3082,Warden's Mail\r\n3089,Rabadon's Deathcap\r\n3087,Statikk Shiv\r\n3086,Zeal\r\n3085,Runaan's Hurricane\r\n3084,Overlord's Bloodmail\r\n3083,Warmog's Armor\r\n3514,Eye of the Herald\r\n2424,Broken Stopwatch\r\n3513,Eye of the Herald\r\n2423,Perfectly Timed Stopwatch\r\n2422,Slightly Magical Boots\r\n2421,Broken Stopwatch\r\n2420,Stopwatch\r\n3751,Bami's Cinder\r\n3091,Wit's End\r\n3095,Stormrazor\r\n3094,Rapid Firecannon\r\n3400,'Your Cut'\r\n3520,Ghost Poro\r\n3416,Head of Kha'Zix\r\n3410,Head of Kha'Zix\r\n3671,Enchantment: Warrior\r\n3672,Enchantment: Cinderhulk\r\n3673,Enchantment: Runic Echoes\r\n1011,Giant's Belt\r\n1006,Rejuvenation Bead\r\n1004,Faerie Charm\r\n3422,Head of Kha'Zix\r\n1001,Boots of Speed\r\n3680,Frosted Snax\r\n3681,Super Spicy Snax\r\n3682,Espresso Snax\r\n3683,Rainbow Snax Party Pack!\r\n3684,Dawnbringer Snax\r\n3200,Prototype Hex Core\r\n1018,Cloak of Agility\r\n3675,Enchantment: Bloodrazor\r\n3690,Cosmic Shackle\r\n3691,Singularity Lantern\r\n3692,Dark Matter Scythe\r\n3693,Gravity Boots\r\n3694,Cloak of Stars\r\n3695,Dark Star Sigil\r\n1033,Null-Magic Mantle\r\n3211,Spectre's Cowl\r\n1031,Chain Vest\r\n1029,Cloth Armor\r\n1028,Ruby Crystal\r\n1027,Sapphire Crystal\r\n1026,Blasting Wand\r\n3685,Nightbringer Snax\r\n3101,Stinger\r\n3222,Mikael's Crucible\r\n1043,Recurve Bow\r\n3100,Lich Bane\r\n1042,Dagger\r\n2010,Total Biscuit of Everlasting Will\r\n1041,Hunter's Machete\r\n3340,Warding Totem (Trinket)\r\n2009,Total Biscuit of Rejuvenation\r\n1039,Hunter's Talisman\r\n1038,B. F. Sword\r\n2006,Showdown Health Potion\r\n1037,Pickaxe\r\n1036,Long Sword\r\n2003,Health Potion\r\n3455,Head of Kha'Zix\r\n1055,Doran's Blade\r\n3112,Guardian's Orb\r\n1054,Doran's Shield\r\n3111,Mercury's Treads\r\n1053,Vampiric Scepter\r\n3110,Frozen Heart\r\n1052,Amplifying Tome\r\n2140,Elixir of Wrath\r\n3109,Knight's Vow\r\n3902,Death's Daughter\r\n3108,Fiendish Codex\r\n3903,Raise Morale\r\n2139,Elixir of Sorcery\r\n3107,Redemption\r\n2138,Elixir of Iron\r\n3348,Arcane Sweeper\r\n3905,Twin Shadows\r\n3105,Aegis of the Legion\r\n2015,Kircheis Shard\r\n3907,Spellbinder\r\n3102,Banshee's Veil\r\n3901,Fire at Will\r\n3123,Executioner's Calling\r\n2033,Corrupting Potion\r\n3001,Abyssal Mask\r\n3364,Oracle Lens\r\n3363,Farsight Alteration\r\n2031,Refillable Potion\r\n3362,Greater Vision Totem (Trinket)\r\n3361,Greater Stealth Totem (Trinket)\r\n3117,Boots of Mobility\r\n3916,Oblivion Orb\r\n3116,Rylai's Crystal Scepter\r\n1058,Needlessly Large Rod\r\n3115,Nashor's Tooth\r\n3599,Black Spear\r\n1057,Negatron Cloak\r\n3114,Forbidden Idol\r\n1056,Doran's Ring\r\n3113,Aether Wisp\r\n3134,Serrated Dirk\r\n3133,Caulfield's Warhammer\r\n3374,Rabadon's Deathcrown\r\n3010,Catalyst of Aeons\r\n3373,Forgefire Cape\r\n3371,Molten Edge\r\n3009,Boots of Swiftness\r\n3008,Manamune (Quick Charge)\r\n3007,Archangel's Staff (Quick Charge)\r\n3006,Berserker's Greaves\r\n3004,Manamune\r\n3003,Archangel's Staff\r\n3124,Guinsoo's Rageblade\r\n3800,Righteous Glory\r\n3801,Crystalline Bracer\r\n3802,Lost Chapter\r\n3024,Glacial Shroud\r\n3145,Hextech Revolver\r\n3387,Frozen Fist\r\n2055,Control Ward\r\n3144,Bilgewater Cutlass\r\n3386,Zhonya's Paradox\r\n2054,Diet Poro-Snax\r\n3022,Frozen Mallet\r\n3143,Randuin's Omen\r\n3142,Youmuu's Ghostblade\r\n3384,Trinity Fusion\r\n2052,Poro-Snax\r\n3020,Sorcerer's Shoes\r\n3383,Circlet of the Iron Solari\r\n1083,Cull\r\n2051,Guardian's Horn\r\n3140,Quicksilver Sash\r\n3382,Salvation\r\n1082,Dark Seal\r\n3380,Obsidian Cleaver\r\n3814,Edge of Night\r\n3139,Mercurial Scimitar\r\n3137,Dervish Blade\r\n3379,Infernal Mask\r\n2047,Oracle's Extract\r\n3136,Haunting Guise\r\n3135,Void Staff\r\n3812,Death's Dance\r\n3390,Luden's Pulse\r\n3035,Last Whisper\r\n3156,Maw of Malmortius\r\n3155,Hexdrinker\r\n2065,Shurelya's Reverie\r\n3033,Mortal Reminder\r\n3153,Blade of the Ruined King\r\n3031,Infinity Edge\r\n3152,Hextech Protobelt-01\r\n3030,Hextech GLP-800\r\n3151,Liandry's Torment\r\n1402,Enchantment: Runic Echoes\r\n3706,Stalker's Blade\r\n1401,Enchantment: Cinderhulk\r\n3029,Rod of Ages (Quick Charge)\r\n1400,Enchantment: Warrior\r\n3028,Chalice of Harmony\r\n3027,Rod of Ages\r\n3026,Guardian Angel\r\n3147,Duskblade of Draktharr\r\n3389,Might of the Ruined King\r\n3025,Iceborn Gauntlet\r\n3146,Hextech Gunblade\r\n3388,Youmuu's Wraithblade\r\n3046,Phantom Dancer\r\n3044,Phage\r\n3165,Morellonomicon\r\n3043,Muramana\r\n3285,Luden's Echo\r\n3042,Muramana\r\n3041,Mejai's Soulstealer\r\n3040,Seraph's Embrace\r\n3161,Spear of Shojin\r\n3715,Skirmisher's Sabre\r\n1414,Enchantment: Runic Echoes\r\n1413,Enchantment: Cinderhulk\r\n1412,Enchantment: Warrior\r\n3158,Ionian Boots of Lucidity\r\n3036,Lord Dominik's Regards\r\n3157,Zhonya's Hourglass\r\n1419,Enchantment: Bloodrazor\r\n1416,Enchantment: Bloodrazor\r\n3057,Sheen\r\n3175,Head of Kha'Zix\r\n3053,Sterak's Gage\r\n3174,Athene's Unholy Grail\r\n3052,Jaurim's Fist\r\n3050,Zeke's Convergence\r\n3600,Black Spear\r\n3048,Seraph's Embrace\r\n3047,Ninja Tabi\r\n3181,Sanguine Blade\r\n3860,Bulwark of the Mountain\r\n3068,Sunfire Cape\r\n3067,Kindlegem\r\n3065,Spirit Visage\r\n3184,Guardian's Hammer\r\n3858,Relic Shield\r\n3859,Targon's Buckler\r\n2403,Minion Dematerializer\r\n3179,Umbral Glaive\r\n3850,Spellthief's Edge\r\n3851,Frostfang\r\n3853,Shard of True Ice\r\n3854,Steel Shoulderguards\r\n3855,Runesteel Spaulders\r\n3857,Pauldrons of Whiterock\r\n3071,Black Cleaver\r\n3070,Tear of the Goddess\r\n3191,Seeker's Armguard\r\n3190,Locket of the Iron Solari\r\n3078,Trinity Force\r\n3077,Tiamat\r\n3198,Perfect Hex Core\r\n3076,Bramble Vest\r\n3197,Hex Core mk-2\r\n3075,Thornmail\r\n3196,Hex Core mk-1\r\n3074,Ravenous Hydra\r\n3073,Tear of the Goddess (Quick Charge)\r\n3194,Adaptive Helm\r\n3072,Bloodthirster\r\n3193,Gargoyle Stoneplate\r\n3748,Titanic Hydra\r\n3504,Ardent Censer\r\n3862,Spectral Sickle\r\n3742,Dead Man's Plate\r\n3863,Harrowing Crescent\r\n3864,Black Mist Scythe\r\n2419,Commencing Stopwatch\r\n3508,Essence Reaver\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/CSVs/Items.csv	(revision 51a891f66f754be1311e2725e259400000af51d3)
+++ LoLparser/CSVs/Items.csv	(date 1587221366516)
@@ -241,248 +241,4 @@
 3903,Raise Morale
 3905,Twin Shadows
 3907,Spellbinder
-3916,Oblivion Orb
-itemID,itemName
-3082,Warden's Mail
-3089,Rabadon's Deathcap
-3087,Statikk Shiv
-3086,Zeal
-3085,Runaan's Hurricane
-3084,Overlord's Bloodmail
-3083,Warmog's Armor
-3514,Eye of the Herald
-2424,Broken Stopwatch
-3513,Eye of the Herald
-2423,Perfectly Timed Stopwatch
-2422,Slightly Magical Boots
-2421,Broken Stopwatch
-2420,Stopwatch
-3751,Bami's Cinder
-3091,Wit's End
-3095,Stormrazor
-3094,Rapid Firecannon
-3400,'Your Cut'
-3520,Ghost Poro
-3416,Head of Kha'Zix
-3410,Head of Kha'Zix
-3671,Enchantment: Warrior
-3672,Enchantment: Cinderhulk
-3673,Enchantment: Runic Echoes
-1011,Giant's Belt
-1006,Rejuvenation Bead
-1004,Faerie Charm
-3422,Head of Kha'Zix
-1001,Boots of Speed
-3680,Frosted Snax
-3681,Super Spicy Snax
-3682,Espresso Snax
-3683,Rainbow Snax Party Pack!
-3684,Dawnbringer Snax
-3200,Prototype Hex Core
-1018,Cloak of Agility
-3675,Enchantment: Bloodrazor
-3690,Cosmic Shackle
-3691,Singularity Lantern
-3692,Dark Matter Scythe
-3693,Gravity Boots
-3694,Cloak of Stars
-3695,Dark Star Sigil
-1033,Null-Magic Mantle
-3211,Spectre's Cowl
-1031,Chain Vest
-1029,Cloth Armor
-1028,Ruby Crystal
-1027,Sapphire Crystal
-1026,Blasting Wand
-3685,Nightbringer Snax
-3101,Stinger
-3222,Mikael's Crucible
-1043,Recurve Bow
-3100,Lich Bane
-1042,Dagger
-2010,Total Biscuit of Everlasting Will
-1041,Hunter's Machete
-3340,Warding Totem (Trinket)
-2009,Total Biscuit of Rejuvenation
-1039,Hunter's Talisman
-1038,B. F. Sword
-2006,Showdown Health Potion
-1037,Pickaxe
-1036,Long Sword
-2003,Health Potion
-3455,Head of Kha'Zix
-1055,Doran's Blade
-3112,Guardian's Orb
-1054,Doran's Shield
-3111,Mercury's Treads
-1053,Vampiric Scepter
-3110,Frozen Heart
-1052,Amplifying Tome
-2140,Elixir of Wrath
-3109,Knight's Vow
-3902,Death's Daughter
-3108,Fiendish Codex
-3903,Raise Morale
-2139,Elixir of Sorcery
-3107,Redemption
-2138,Elixir of Iron
-3348,Arcane Sweeper
-3905,Twin Shadows
-3105,Aegis of the Legion
-2015,Kircheis Shard
-3907,Spellbinder
-3102,Banshee's Veil
-3901,Fire at Will
-3123,Executioner's Calling
-2033,Corrupting Potion
-3001,Abyssal Mask
-3364,Oracle Lens
-3363,Farsight Alteration
-2031,Refillable Potion
-3362,Greater Vision Totem (Trinket)
-3361,Greater Stealth Totem (Trinket)
-3117,Boots of Mobility
-3916,Oblivion Orb
-3116,Rylai's Crystal Scepter
-1058,Needlessly Large Rod
-3115,Nashor's Tooth
-3599,Black Spear
-1057,Negatron Cloak
-3114,Forbidden Idol
-1056,Doran's Ring
-3113,Aether Wisp
-3134,Serrated Dirk
-3133,Caulfield's Warhammer
-3374,Rabadon's Deathcrown
-3010,Catalyst of Aeons
-3373,Forgefire Cape
-3371,Molten Edge
-3009,Boots of Swiftness
-3008,Manamune (Quick Charge)
-3007,Archangel's Staff (Quick Charge)
-3006,Berserker's Greaves
-3004,Manamune
-3003,Archangel's Staff
-3124,Guinsoo's Rageblade
-3800,Righteous Glory
-3801,Crystalline Bracer
-3802,Lost Chapter
-3024,Glacial Shroud
-3145,Hextech Revolver
-3387,Frozen Fist
-2055,Control Ward
-3144,Bilgewater Cutlass
-3386,Zhonya's Paradox
-2054,Diet Poro-Snax
-3022,Frozen Mallet
-3143,Randuin's Omen
-3142,Youmuu's Ghostblade
-3384,Trinity Fusion
-2052,Poro-Snax
-3020,Sorcerer's Shoes
-3383,Circlet of the Iron Solari
-1083,Cull
-2051,Guardian's Horn
-3140,Quicksilver Sash
-3382,Salvation
-1082,Dark Seal
-3380,Obsidian Cleaver
-3814,Edge of Night
-3139,Mercurial Scimitar
-3137,Dervish Blade
-3379,Infernal Mask
-2047,Oracle's Extract
-3136,Haunting Guise
-3135,Void Staff
-3812,Death's Dance
-3390,Luden's Pulse
-3035,Last Whisper
-3156,Maw of Malmortius
-3155,Hexdrinker
-2065,Shurelya's Reverie
-3033,Mortal Reminder
-3153,Blade of the Ruined King
-3031,Infinity Edge
-3152,Hextech Protobelt-01
-3030,Hextech GLP-800
-3151,Liandry's Torment
-1402,Enchantment: Runic Echoes
-3706,Stalker's Blade
-1401,Enchantment: Cinderhulk
-3029,Rod of Ages (Quick Charge)
-1400,Enchantment: Warrior
-3028,Chalice of Harmony
-3027,Rod of Ages
-3026,Guardian Angel
-3147,Duskblade of Draktharr
-3389,Might of the Ruined King
-3025,Iceborn Gauntlet
-3146,Hextech Gunblade
-3388,Youmuu's Wraithblade
-3046,Phantom Dancer
-3044,Phage
-3165,Morellonomicon
-3043,Muramana
-3285,Luden's Echo
-3042,Muramana
-3041,Mejai's Soulstealer
-3040,Seraph's Embrace
-3161,Spear of Shojin
-3715,Skirmisher's Sabre
-1414,Enchantment: Runic Echoes
-1413,Enchantment: Cinderhulk
-1412,Enchantment: Warrior
-3158,Ionian Boots of Lucidity
-3036,Lord Dominik's Regards
-3157,Zhonya's Hourglass
-1419,Enchantment: Bloodrazor
-1416,Enchantment: Bloodrazor
-3057,Sheen
-3175,Head of Kha'Zix
-3053,Sterak's Gage
-3174,Athene's Unholy Grail
-3052,Jaurim's Fist
-3050,Zeke's Convergence
-3600,Black Spear
-3048,Seraph's Embrace
-3047,Ninja Tabi
-3181,Sanguine Blade
-3860,Bulwark of the Mountain
-3068,Sunfire Cape
-3067,Kindlegem
-3065,Spirit Visage
-3184,Guardian's Hammer
-3858,Relic Shield
-3859,Targon's Buckler
-2403,Minion Dematerializer
-3179,Umbral Glaive
-3850,Spellthief's Edge
-3851,Frostfang
-3853,Shard of True Ice
-3854,Steel Shoulderguards
-3855,Runesteel Spaulders
-3857,Pauldrons of Whiterock
-3071,Black Cleaver
-3070,Tear of the Goddess
-3191,Seeker's Armguard
-3190,Locket of the Iron Solari
-3078,Trinity Force
-3077,Tiamat
-3198,Perfect Hex Core
-3076,Bramble Vest
-3197,Hex Core mk-2
-3075,Thornmail
-3196,Hex Core mk-1
-3074,Ravenous Hydra
-3073,Tear of the Goddess (Quick Charge)
-3194,Adaptive Helm
-3072,Bloodthirster
-3193,Gargoyle Stoneplate
-3748,Titanic Hydra
-3504,Ardent Censer
-3862,Spectral Sickle
-3742,Dead Man's Plate
-3863,Harrowing Crescent
-3864,Black Mist Scythe
-2419,Commencing Stopwatch
-3508,Essence Reaver
+3916,Oblivion Orb
\ No newline at end of file
Index: LoLparser/src/com/LoLDataHarvester/fillDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.LoLDataHarvester;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.sql.PreparedStatement;\r\n\r\nimport static java.lang.Boolean.parseBoolean;\r\nimport static java.lang.Integer.parseInt;\r\n\r\npublic class fillDatabase {\r\n\r\n    private databaseConnection dbConn;\r\n\r\n    public fillDatabase(databaseConnection dbConn){\r\n        this.dbConn = dbConn;\r\n    }\r\n\r\n    public void run(){\r\n        fillSummonerTable();\r\n        fillTeamDataTable();\r\n        fillItemsTable();\r\n        fillSpellsTable();\r\n        fillChampionTable();\r\n        fillMatchHistoryTable();\r\n        updateMatchHistoryTable();\r\n        fillChampionMasteryTable();\r\n\r\n        /** niet nodig?\r\n         *\r\n         *         //fillTeamTable();\r\n         */\r\n    }\r\n\r\n    /**\r\n     * function to fill the summonerTable\r\n     */\r\n    private void fillSummonerTable(){\r\n        // Select right url for array\r\n        String csvUrl = \"LoLparser/CSVs/AllPlayersWithIDs.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO SUMMONER\" +\r\n                \"(AccountID,SummonerID,Name,Rank,Tier,SummonerLevel,LeaguePoints,\" +\r\n                \"TotalGamesPlayed,Wins,Losses,Veteran,FreshBlood)\" +\r\n                \"VALUES(?,?,?,?,?,?,?,?,?,?,?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();// Skip the first line\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setString(1,data[17]); // AccountID\r\n                stmt.setString(2,data[4]);  // SummonerID\r\n                stmt.setString(3,data[5]);  // Name\r\n                stmt.setString(4,data[3]);  // Rank\r\n                stmt.setString(5,data[2]);  // Tier\r\n                stmt.setFloat(6,Float.parseFloat(data[18]));  // SummonerLevel\r\n                stmt.setFloat(7,Float.parseFloat(data[6]));  // LeaguePoints\r\n                stmt.setFloat(8,Float.parseFloat(data[8])+ Float.parseFloat(data[7]));  // TotalGamesPlayedPoints\r\n                stmt.setFloat(9,Float.parseFloat(data[7]));  // Wins\r\n                stmt.setFloat(10,Float.parseFloat(data[8]));  // Losses\r\n                stmt.setBoolean(11,parseBoolean(data[9]));  // Veteran\r\n                stmt.setBoolean(12,parseBoolean(data[11])); // Freshblood\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n            System.out.println(\"Summoner table filled\");\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fillChampionTable(){\r\n        // Select right url for array\r\n        String csvUrl = \"LoLparser/CSVs/Champions.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO CHAMPION\" +\r\n                \"(ChampionID,Name) VALUES(?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[17]));    // ChampionID\r\n                stmt.setString(2,data[4]);                      // Name\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fillTeamDataTable(){\r\n        String csvUrl = \"LoLparser/CSVs/AllParticipantTeamData.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO teamData\" +\r\n                \"(MachtTeamID,MatchID,TeamID,Win,firstBloodTeam,firstRiftTeam,\" +\r\n                \"countRift,firstBaronTeam,countBaron,firstDragonTeam,countDragon,\" +\r\n                \"firstInhibitorTeam,countInhibitor,firstTowerTeam,countTower)\" +\r\n                \"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[0]+data[1])); // MachtTeamID\r\n                stmt.setFloat(2,Float.parseFloat(data[0]));           // MatchID\r\n                stmt.setFloat(3,Float.parseFloat(data[1]));           // TeamID\r\n                stmt.setString(4,data[2]);                            // Win\r\n                stmt.setBoolean(5,parseBoolean(data[3]));             // firstBloodTeam\r\n                stmt.setBoolean(6,parseBoolean(data[4]));             // firstRiftTeam\r\n                stmt.setFloat(7,Float.parseFloat(data[6]));           // countRift\r\n                stmt.setBoolean(8,parseBoolean(data[3]));             // firstBaronTeam\r\n                stmt.setFloat(9,Float.parseFloat(data[7]));           // countBaron\r\n                stmt.setBoolean(10,parseBoolean(data[3]));            // firstDragonTeam\r\n                stmt.setFloat(11,Float.parseFloat(data[9]));          // countDragon\r\n                stmt.setBoolean(12,parseBoolean(data[11]));           // firstInhibitorTeam\r\n                stmt.setFloat(13,Float.parseFloat(data[11]));         // countInhibitor\r\n                stmt.setBoolean(14,parseBoolean(data[11]));           // firstTowerTeam\r\n                stmt.setFloat(15,Float.parseFloat(data[11]));         // countTower\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fillChampionMasteryTable(){\r\n        String csvUrl = \"LoLparser/CSVs/AllPlayerMasteries.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO CHAMPIONMASTERY\" +\r\n                \"(ChampionID,AccountID,Name,Rank,Tier,SummonerLevel,\" +\r\n                \"LeaguePoints,TotalGamesPlayed,Wins,Losses,Veteran,FreshBlood)\" +\r\n                \"VALUES(?,?,?,?,?,?,?,?,?,?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[0]));     // ChampionID\r\n                stmt.setFloat(2,Float.parseFloat(data[0]));     // AccountID\r\n                stmt.setFloat(3,Float.parseFloat(data[1]));     // Name\r\n                stmt.setString(4,data[2]);                      // Rank\r\n                stmt.setBoolean(5,parseBoolean(data[3]));       // Tier\r\n                stmt.setBoolean(6,parseBoolean(data[6]));       // SummonerLevel\r\n                stmt.setFloat(7,Float.parseFloat(data[6]));     // LeaguePoints\r\n                stmt.setBoolean(8,parseBoolean(data[3]));       // TotalGamesPlayed\r\n                stmt.setFloat(9,Float.parseFloat(data[7]));     // Wins\r\n                stmt.setBoolean(10,parseBoolean(data[3]));      // Losses\r\n                stmt.setFloat(11,Float.parseFloat(data[9]));    // Veteran\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fillItemsTable(){\r\n        String csvUrl = \"LoLparser/CSVs/Items.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO ITEM\" +\r\n                \"(ItemID,Name) VALUES(?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[0]));     // SpellID\r\n                stmt.setString(2,data[0]);                      // Name\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fillSpellsTable(){\r\n        String csvUrl = \"LoLparser/CSVs/spells.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO SPELL\" +\r\n                \"(SpellID,Name) VALUES(?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[0]));     // SpellID\r\n                stmt.setString(2,data[0]);                      // Name\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fillMatchHistoryTable(){\r\n        String csvUrl = \"LoLparser/CSVs/AllMatchHistory.csv\";\r\n\r\n        String sql_INSERT = \"INSERT INTO MATCHHISTORY\" +\r\n                \"(MatchID,ChampionID,AccountID,Lane,Role,Region)\" +\r\n                \"VALUES(?,?,?,?,?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[0]));      // MatchID\r\n                stmt.setFloat(2,Float.parseFloat(data[3]));      // ChampionID\r\n                stmt.setString(3,data[2]);                       // AccountID\r\n                stmt.setString(4,data[7]);                       // Lane mist\r\n                stmt.setString(5,data[2]);                       // Role mist\r\n                stmt.setString(6,data[4]);                       // Region mist\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void updateMatchHistoryTable(){\r\n        String csvUrl = \"LoLparser/CSVs/AllParticipantData.csv\"; // AllParticipantData.csv\r\n\r\n        String sql_UPDATE = \"UPDATE MATCHHISTORY SET \" +\r\n                \"Spell1=?, Spell2=?, FirstBlood=?, FirstInhibitor=?, FirstTower=?,\" +\r\n                \"GoldEarned=?,CreepKills=?,PlayerKills=?,PlayerAssists=?,Item0=?,\" +\r\n                \"Item1=?,Item2=?,Item3=?,Item1=?,Item5=?,Item6=?\" +\r\n                \"WHERE MatchID == ? AND AccountID == ?\";\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_UPDATE);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(7,Float.parseFloat(data[5]));      // Spell1\r\n                stmt.setFloat(8,Float.parseFloat(data[6]));      // Spell2\r\n                stmt.setBoolean(9,parseBoolean(data[7]));        // FirstBlood\r\n                stmt.setBoolean(10,parseBoolean(data[8]));       // FirstInhibitor\r\n                stmt.setBoolean(11,parseBoolean(data[9]));       // FirstTower\r\n                stmt.setFloat(12,Float.parseFloat(data[10]));     // GoldEarned\r\n                stmt.setFloat(13,Float.parseFloat(data[11]));    // CreepKills\r\n                stmt.setFloat(14,Float.parseFloat(data[12]));    // PlayerKills\r\n                stmt.setFloat(15,Float.parseFloat(data[14]));    // PlayerAssists\r\n                stmt.setFloat(16,Float.parseFloat(data[15]));    // Item0\r\n                stmt.setFloat(17,Float.parseFloat(data[16]));    // Item1\r\n                stmt.setFloat(18,Float.parseFloat(data[17]));    // Item2\r\n                stmt.setFloat(19,Float.parseFloat(data[18]));    // Item3\r\n                stmt.setFloat(20,Float.parseFloat(data[19]));    // Item4\r\n                stmt.setFloat(21,Float.parseFloat(data[20]));    // Item5\r\n                stmt.setFloat(22,Float.parseFloat(data[21]));    // Item6\r\n\r\n                // WHERE clause\r\n                stmt.setString(17,data[0]);                      // MatchID\r\n                stmt.setFloat(18,Float.parseFloat(data[1]));     // AccountID\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    //TODO test if needed or not\r\n    private void fillTeamTable(){\r\n        String csvUrl = \"AllParticipantTeamData\";\r\n\r\n        String sql_INSERT = \"INSERT INTO TEAM\" +\r\n                \"(MatchID,AccountID,MachtTeamID,ChampionID)\" +\r\n                \"VALUES(?,?,?,?)\"; // a ? is a placeholder we will fill later\r\n\r\n        dbConn.connectToDatabaseServer();\r\n        try{\r\n            // This statment we will fill with the right values\r\n            PreparedStatement stmt = dbConn.getConn().prepareStatement(sql_INSERT);\r\n            // This will read line by line through the CSV file\r\n            BufferedReader lineReader = new BufferedReader(new FileReader(csvUrl));\r\n            String lineText = null;\r\n\r\n            lineReader.readLine();\r\n\r\n            // While the current line isnt null read csv line by line\r\n            while((lineText = lineReader.readLine()) != null){\r\n                // This holds the data and we tell it to fill the columns and split them by ,\r\n                String[] data = lineText.split(\",\");\r\n                // Put the right csv value with te right placeholder\r\n                stmt.setFloat(1,Float.parseFloat(data[1]));     // MatchID\r\n                stmt.setFloat(2,Float.parseFloat(data[5]));     // AccountID\r\n                stmt.setString(3,data[0]);                      // MatchTeamID\r\n                stmt.setString(4,data[7]);                      // ChampionID\r\n\r\n                // We will execute when all lines are read\r\n                stmt.addBatch();\r\n            }\r\n\r\n            lineReader.close();\r\n            // Execute all sql statements\r\n            stmt.executeBatch();\r\n            dbConn.getConn().close();\r\n\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/fillDatabase.java	(revision 51a891f66f754be1311e2725e259400000af51d3)
+++ LoLparser/src/com/LoLDataHarvester/fillDatabase.java	(date 1587222027967)
@@ -24,7 +24,7 @@
         fillChampionTable();
         fillMatchHistoryTable();
         updateMatchHistoryTable();
-        fillChampionMasteryTable();
+        //fillChampionMasteryTable();
 
         /** niet nodig?
          *
@@ -107,8 +107,8 @@
                 // This holds the data and we tell it to fill the columns and split them by ,
                 String[] data = lineText.split(",");
                 // Put the right csv value with te right placeholder
-                stmt.setFloat(1,Float.parseFloat(data[17]));    // ChampionID
-                stmt.setString(2,data[4]);                      // Name
+                stmt.setFloat(1,Float.parseFloat(data[1]));    // ChampionID
+                stmt.setString(2,data[2]);                      // Name
 
                 // We will execute when all lines are read
                 stmt.addBatch();
@@ -154,15 +154,15 @@
                 stmt.setString(4,data[2]);                            // Win
                 stmt.setBoolean(5,parseBoolean(data[3]));             // firstBloodTeam
                 stmt.setBoolean(6,parseBoolean(data[4]));             // firstRiftTeam
-                stmt.setFloat(7,Float.parseFloat(data[6]));           // countRift
-                stmt.setBoolean(8,parseBoolean(data[3]));             // firstBaronTeam
+                stmt.setFloat(7,Float.parseFloat(data[5]));           // countRift
+                stmt.setBoolean(8,parseBoolean(data[6]));             // firstBaronTeam
                 stmt.setFloat(9,Float.parseFloat(data[7]));           // countBaron
-                stmt.setBoolean(10,parseBoolean(data[3]));            // firstDragonTeam
+                stmt.setBoolean(10,parseBoolean(data[8]));            // firstDragonTeam
                 stmt.setFloat(11,Float.parseFloat(data[9]));          // countDragon
-                stmt.setBoolean(12,parseBoolean(data[11]));           // firstInhibitorTeam
+                stmt.setBoolean(12,parseBoolean(data[10]));           // firstInhibitorTeam
                 stmt.setFloat(13,Float.parseFloat(data[11]));         // countInhibitor
-                stmt.setBoolean(14,parseBoolean(data[11]));           // firstTowerTeam
-                stmt.setFloat(15,Float.parseFloat(data[11]));         // countTower
+                stmt.setBoolean(14,parseBoolean(data[12]));           // firstTowerTeam
+                stmt.setFloat(15,Float.parseFloat(data[13]));         // countTower
 
                 // We will execute when all lines are read
                 stmt.addBatch();
@@ -201,9 +201,9 @@
                 // This holds the data and we tell it to fill the columns and split them by ,
                 String[] data = lineText.split(",");
                 // Put the right csv value with te right placeholder
-                stmt.setFloat(1,Float.parseFloat(data[0]));     // ChampionID
-                stmt.setFloat(2,Float.parseFloat(data[0]));     // AccountID
-                stmt.setFloat(3,Float.parseFloat(data[1]));     // Name
+                stmt.setString(1,data[0]);                      // ChampionID
+                stmt.setFloat(2,Float.parseFloat(data[9]));     // AccountID
+                stmt.setFloat(3,Float.parseFloat(data[2]));     // Name
                 stmt.setString(4,data[2]);                      // Rank
                 stmt.setBoolean(5,parseBoolean(data[3]));       // Tier
                 stmt.setBoolean(6,parseBoolean(data[6]));       // SummonerLevel
@@ -249,7 +249,7 @@
                 String[] data = lineText.split(",");
                 // Put the right csv value with te right placeholder
                 stmt.setFloat(1,Float.parseFloat(data[0]));     // SpellID
-                stmt.setString(2,data[0]);                      // Name
+                stmt.setString(2,data[1]);                      // Name
 
                 // We will execute when all lines are read
                 stmt.addBatch();
@@ -287,7 +287,7 @@
                 String[] data = lineText.split(",");
                 // Put the right csv value with te right placeholder
                 stmt.setFloat(1,Float.parseFloat(data[0]));     // SpellID
-                stmt.setString(2,data[0]);                      // Name
+                stmt.setString(2,data[1]);                      // Name
 
                 // We will execute when all lines are read
                 stmt.addBatch();
@@ -325,9 +325,9 @@
                 // This holds the data and we tell it to fill the columns and split them by ,
                 String[] data = lineText.split(",");
                 // Put the right csv value with te right placeholder
-                stmt.setFloat(1,Float.parseFloat(data[0]));      // MatchID
-                stmt.setFloat(2,Float.parseFloat(data[3]));      // ChampionID
-                stmt.setString(3,data[2]);                       // AccountID
+                stmt.setFloat(1,Float.parseFloat(data[1]));      // MatchID
+                stmt.setFloat(2,Float.parseFloat(data[5]));      // ChampionID
+                stmt.setString(3,data[0]);                       // AccountID
                 stmt.setString(4,data[7]);                       // Lane mist
                 stmt.setString(5,data[2]);                       // Role mist
                 stmt.setString(6,data[4]);                       // Region mist
Index: LoLparser/src/com/LoLDataHarvester/LoLDataHarvester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.LoLDataHarvester;\r\n\r\nimport java.io.IOException;\r\n\r\n\r\npublic class LoLDataHarvester {\r\n\r\n    private static String[] tiers = {\"DIAMOND\",\"PLATINUM\",\"GOLD\",\"SILVER\",\"BRONZE\",\"IRON\"}; //De tiers die beschikbaar zijn om te scannen.\r\n    private static String[] divisions = {\"I\",\"II\",\"III\",\"IV\"}; //De brackets die beschikbaar zijn om te scannen.\r\n\r\n    //private  static String[] tiers = {\"DIAMOND\"}; //Single tier voor test.\r\n    //private  static String[] divisions = {\"I\"}; //Single bracket voor test.\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        createDatabase db = new createDatabase(\"postgres\", \"!RappaR1964\", \"lolparserdata\",5432, \"localhost\");\r\n\r\n        /**\r\n         * Section to start the data harvester\r\n         */\r\n        //harvestData harvester = new harvestData(\"RGAPI-3fd1aa73-1ab7-4311-a1fa-7813fe8c1cd9\",\"euw1\",tiers,divisions);\r\n        //harvester.run();\r\n\r\n        /**\r\n         * Section to fill the database with collected database\r\n         */\r\n        fillDatabase fillDB = new fillDatabase(db.getDbConn());\r\n        fillDB.run();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/LoLDataHarvester.java	(revision 51a891f66f754be1311e2725e259400000af51d3)
+++ LoLparser/src/com/LoLDataHarvester/LoLDataHarvester.java	(date 1587221533550)
@@ -12,8 +12,8 @@
     //private  static String[] divisions = {"I"}; //Single bracket voor test.
 
     public static void main(String[] args) throws IOException {
-        createDatabase db = new createDatabase("postgres", "!RappaR1964", "lolparserdata",5432, "localhost");
-
+        createDatabase db = new createDatabase("postgres", "postgres", "lolparserdata",5432, "localhost");
+        db.dropAllTables();
         /**
          * Section to start the data harvester
          */
