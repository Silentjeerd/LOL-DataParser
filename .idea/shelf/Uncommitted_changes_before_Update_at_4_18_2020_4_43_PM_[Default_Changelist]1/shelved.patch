Index: LoLparser/CSVs/AllParticipantData.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/CSVs/AllParticipantData.csv	(revision 76c3c157933e8ef1a4d091382b3db6b6cc4f2e2f)
+++ LoLparser/CSVs/AllParticipantData.csv	(date 1587220978151)
@@ -72748,9 +72748,4 @@
 4271507681,qc9j_hIy-bavUQiFJS1mHdBJelGphl7JE6mDCwYWFmSI0Sw,7,134,200,4,12,true,false,false,12591,157,9,3,4,3285,3907,3020,3165,2033,2055,3363,20
 4271507681,Lerq1WvTdCnfQn13C5rTp-HVa9bPRKTybcs4qtmRZIhcYiU,8,122,200,6,4,false,false,false,11921,175,9,4,2,3512,3053,3078,3111,0,0,3340,6
 4271507681,DgWKfbhsT66uTHKrtKSWwA-mpUAc4f_-zuYcQ07dXH7uPWI,9,2,200,4,11,false,false,true,9634,46,2,3,4,1400,3071,3047,3211,2055,1006,3364,20
-4271507681,djvofmeZCj_Husva8z-OgeCaGh-zlNzQS1xeYsKtm-6QL9g,10,236,200,4,7,false,true,false,8465,129,3,7,3,2031,3153,1054,3006,3508,1042,3363,11
-4260244720,-jrhBi5djO-0RwlVUScioF_B04robfwRq7aAT6M0dxGhY3c,1,40,100,4,14,false,false,false,6074,14,0,5,12,3117,3098,3504,3028,0,2055,3364,39
-4260244720,Ic-vYjQlnbZEYnB_wwccyDsqCuKSSWzdXonsTKbrcuvV5w,2,150,100,4,12,false,false,false,9665,164,4,2,4,2055,2421,3111,3071,1055,3022,3340,17
-4260244720,o0Km3az0IrtlOwGlhnjz8EPtvjLAezdGPphCo3bmNHPcDoEPUtyNN9t-,3,2,100,4,11,false,false,false,8594,30,4,10,7,1400,3047,3071,3801,1029,0,3364,16
-4260244720,3pIfOFhtVJlgOMBL8G1bm1C3VsXQwqLDT1GIpRfZwwT2IA,4,38,100,4,12,false,false,false,9466,185,3,5,3,3100,3020,3040,2033,1026,1082,3340,18
-4260244720,ywiFjl9zEwhh7Gk5qi3f9EtabBkvUkAkTLf5lp
\ No newline at end of file
+4271507681,djvofmeZCj_Husva8z-OgeCaGh-zlNzQS1xeYsKtm-6QL9g,10,236,200,4,7,false,true,false,8465,129,3,7,3,2031,3153,1054,3006,3508,1042,3363,11
\ No newline at end of file
Index: LoLparser/src/com/LoLDataHarvester/MatchHistory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.LoLDataHarvester;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class MatchHistory {\r\n\r\n    private String[] divisions, tiers;\r\n    private String apiKey,region;\r\n\r\n    public MatchHistory( String[] divisions, String[] tiers, String apiKey,String region) {\r\n\r\n        this.divisions = divisions;\r\n        this.tiers = tiers;\r\n        this.apiKey = apiKey;\r\n        this.region = region;\r\n    }\r\n\r\n    public void getdata() throws IOException{\r\n        final String lineSep=System.getProperty(\"line.separator\");\r\n        String readFile = \"LoLparser/CSVs/AllPlayersWithIDs.csv\";\r\n        String outputFile = \"LoLparser/CSVs/AllMatchHistory.csv\";\r\n        String placeHolder = \"\";\r\n        int lineCount = parser.countLines(readFile);\r\n        BufferedReader reader = new BufferedReader(new FileReader(readFile));\r\n\r\n        String line = null;\r\n        String[] tokens;\r\n        int i = 0;\r\n\r\n        for (line = reader.readLine(); line != null;line = reader.readLine(),i++){\r\n            tokens = line.split(\",\");\r\n            String summoner = tokens[17];\r\n            int tryCount = 0;\r\n            int maxTries = 5;\r\n            while(tryCount < maxTries){\r\n             try{\r\n                 if(i > 0){\r\n                     parser.sleep(1500);\r\n                     String urlWhole = \"https://\" + region + \".api.riotgames.com/lol/match/v4/matchlists/by-account/\" + summoner + \"?queue=420&api_key=\" + apiKey;\r\n                     //haalt een subarray op.\r\n                     String jsonString = parser.returnJsonStringFromUrl(urlWhole,\"matches\");\r\n                     jsonString = jsonString.replace('\"' + \"gameId\" +'\"','\"' + \"accountId\" + '\"' + ':' + '\"' + summoner + '\"' + ',' + '\"' + \"gameId\" +'\"');\r\n                     if(placeHolder == \"\"){\r\n                         placeHolder = jsonString.substring(0,jsonString.length() -1);\r\n                     }else{\r\n                         placeHolder = placeHolder + \",\" + jsonString.substring(1,jsonString.length()-1);\r\n                     }\r\n\r\n                 }\r\n                 tryCount = maxTries;\r\n             }catch (Exception e){\r\n                 parser.sleep(2000);\r\n                 tryCount++;\r\n                 if(tryCount == maxTries) System.out.println(e.toString());\r\n             }\r\n            }\r\n            System.out.println(\"Done with: \" + (i+1) + \" out of \" + lineCount);\r\n        }\r\n\r\n        if(placeHolder != \"\"){\r\n            placeHolder = placeHolder +\"]\";\r\n            parser.generateCSVFromJString(placeHolder,outputFile);\r\n        }else{\r\n            System.out.println(\"Failed to retrieve any match history\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/MatchHistory.java	(revision 76c3c157933e8ef1a4d091382b3db6b6cc4f2e2f)
+++ LoLparser/src/com/LoLDataHarvester/MatchHistory.java	(date 1587215942622)
@@ -1,8 +1,8 @@
 package com.LoLDataHarvester;
 
-import java.io.BufferedReader;
-import java.io.FileReader;
-import java.io.IOException;
+import org.json.JSONObject;
+
+import java.io.*;
 
 
 public class MatchHistory {
@@ -11,7 +11,6 @@
     private String apiKey,region;
 
     public MatchHistory( String[] divisions, String[] tiers, String apiKey,String region) {
-
         this.divisions = divisions;
         this.tiers = tiers;
         this.apiKey = apiKey;
@@ -42,13 +41,13 @@
                      String urlWhole = "https://" + region + ".api.riotgames.com/lol/match/v4/matchlists/by-account/" + summoner + "?queue=420&api_key=" + apiKey;
                      //haalt een subarray op.
                      String jsonString = parser.returnJsonStringFromUrl(urlWhole,"matches");
+                     JSONObject fixMatchIDs = new JSONObject(jsonString);
                      jsonString = jsonString.replace('"' + "gameId" +'"','"' + "accountId" + '"' + ':' + '"' + summoner + '"' + ',' + '"' + "gameId" +'"');
                      if(placeHolder == ""){
                          placeHolder = jsonString.substring(0,jsonString.length() -1);
                      }else{
                          placeHolder = placeHolder + "," + jsonString.substring(1,jsonString.length()-1);
                      }
-
                  }
                  tryCount = maxTries;
              }catch (Exception e){
@@ -67,4 +66,5 @@
             System.out.println("Failed to retrieve any match history");
         }
     }
+
 }
Index: LoLparser/src/com/LoLDataHarvester/harvestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.LoLDataHarvester;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class harvestData {\r\n\r\n    private String api_key, region ;\r\n    private String[] tiers, divisions;\r\n\r\n    /**\r\n     * Main constructor to setup the harvesting\r\n     * @param api_key = api key provided by roit games\r\n     * @param region = the 'region' we want to retrieve data from\r\n     * @param tiers = the 'tiers' we want te retrieve data from\r\n     * @param divisions = the 'divisions' we want to retrieve data from\r\n     */\r\n    public harvestData(String api_key, String region, String[] tiers, String[] divisions) {\r\n        this.api_key = api_key;\r\n        this.region = region;\r\n        this.tiers = tiers;\r\n        this.divisions = divisions;\r\n    }\r\n\r\n    /**\r\n     * This function makes acuates all functions within this class to start harvesting data.\r\n     * Here is were we setup what we want to scrape or not.\r\n     * @throws IOException\r\n     */\r\n    public void run() throws IOException {\r\n        //getAllPlayerRanks();\r\n        //appendBracketsWithIDs();\r\n        //getMatchHistoryByAccountID();\r\n        //getChallengerData();\r\n        //getMatchDataByID();\r\n        //getAllMasteries();\r\n        getChampions();\r\n    }\r\n\r\n    private void getChampions()throws IOException {\r\n        System.out.println(\"Get all Champions data\");\r\n        champspellitems champs = new champspellitems(\"10.6.1\");\r\n        champs.getData();\r\n    }\r\n\r\n    private void getAllPlayerRanks()  throws IOException {\r\n        System.out.println(\"Get all player rank data\");\r\n        leagueV4EntriesQueTierDivision leaderboard = new leagueV4EntriesQueTierDivision(divisions,tiers,api_key,region);\r\n        leaderboard.getData();\r\n    }\r\n\r\n    private void getMatchHistoryByAccountID() throws IOException{\r\n        System.out.println(\"Getting all match history\");\r\n        MatchHistory matchHistory = new MatchHistory(divisions,tiers,api_key,region);\r\n        matchHistory.getdata();\r\n    }\r\n\r\n    private void getMatchDataByID() throws IOException {\r\n        System.out.println(\"Getting all match data\");\r\n        matchv4MatchesByMatchID getMatchData = new matchv4MatchesByMatchID(api_key,region);\r\n        getMatchData.writeToOneCSV();\r\n\r\n    }\r\n\r\n    private void getChallengerData() throws  IOException{\r\n        challengerSoloQue5x5 output = new challengerSoloQue5x5( \"LoLparser/CSVs/PlayersPerBracket/\");\r\n        output.getData(region,api_key);\r\n    }\r\n\r\n    /**\r\n     * Haalt alle accountID's op en vult deze aan bij bijbehorende speler.\r\n     * @throws IOException\r\n     */\r\n    private void appendBracketsWithIDs() throws IOException{\r\n        System.out.println(\"Appending players with IDs\");\r\n        appendCSVs append = new appendCSVs(api_key,region);\r\n        append.getAllIDs();\r\n    }\r\n\r\n    private void getAllMasteries() throws IOException {\r\n        System.out.println(\"Getting all player masteries\");\r\n        playerMasteries masteries = new playerMasteries(api_key, region);\r\n        masteries.getdata();\r\n    }\r\n\r\n    private void getChampionRotation() throws IOException{\r\n        System.out.println(\"Getting Champion Rotation\");\r\n        championRotations rotation = new championRotations(api_key,region);\r\n        rotation.getData();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/harvestData.java	(revision 76c3c157933e8ef1a4d091382b3db6b6cc4f2e2f)
+++ LoLparser/src/com/LoLDataHarvester/harvestData.java	(date 1587212743062)
@@ -32,8 +32,8 @@
         //getMatchHistoryByAccountID();
         //getChallengerData();
         //getMatchDataByID();
-        //getAllMasteries();
-        getChampions();
+        getAllMasteries();
+        //getChampions();
     }
 
     private void getChampions()throws IOException {
Index: LoLparser/src/com/LoLDataHarvester/matchv4MatchesByMatchID.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.LoLDataHarvester;\r\n\r\nimport java.io.*;\r\n\r\nimport java.net.URL;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport jdk.jshell.spi.ExecutionControlProvider;\r\nimport org.json.CDL;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport org.apache.commons.io.FileUtils;\r\n\r\npublic class matchv4MatchesByMatchID {\r\n\r\n    private String apiKey,region;\r\n    private String fileToWrite2,fileToWrite3,fileToWrite4,fileToGetAll;\r\n\r\n    public matchv4MatchesByMatchID(String apiKey,String region) throws IOException {\r\n        this.region = region;\r\n        this.apiKey = apiKey;\r\n\r\n        //De CSV filepaths waarin de data moet worden opgeslagen.\r\n        this.fileToWrite2 = \"LoLparser/CSVs/AllParticipantTeamData.csv\";\r\n        this.fileToWrite3 = \"LoLparser/CSVs/AllParticipantData.csv\";\r\n        this.fileToWrite4 = \"LoLparser/CSVs/AllMatchesBans.csv\";\r\n        //De CSV file waaruit de individuele matchID's moeten worden gehaald voor de URL voor het HTTP request.\r\n        this.fileToGetAll = \"LoLparser/CSVs/AllMatchHistory.csv\";\r\n    }\r\n\r\n    //Deze functie haalt alle teamData uit het JSONObject dat hij meekrijgt.\r\n    private String teamDataToWrite(JSONObject object){\r\n        int teamId = object.getInt(\"teamId\");\r\n        String win = object.getString(\"win\");\r\n        boolean firstBlood = object.getBoolean(\"firstBlood\");\r\n        boolean firstRift = object.getBoolean(\"firstRiftHerald\");\r\n        int riftHeraldKills = object.getInt(\"riftHeraldKills\");\r\n        boolean firstBaron = object.getBoolean(\"firstBaron\");\r\n        int baronKills = object.getInt(\"baronKills\");\r\n        boolean firstDragon = object.getBoolean(\"firstDragon\");\r\n        int dragonKills = object.getInt(\"dragonKills\");\r\n        boolean firstInhib = object.getBoolean(\"firstInhibitor\");\r\n        int inhibKills = object.getInt(\"inhibitorKills\");\r\n        boolean firstTower = object.getBoolean(\"firstTower\");\r\n        int towerKills = object.getInt(\"towerKills\");\r\n\r\n        return teamId + \",\" + win + \",\" + firstBlood + \",\" + firstRift + \",\" + riftHeraldKills + \",\" +\r\n                firstBaron + \",\" + baronKills + \",\" + firstDragon + \",\" + dragonKills + \",\" +\r\n                firstInhib + \",\" + inhibKills + \",\" + firstTower + \",\" + towerKills;\r\n    }\r\n\r\n    //Deze functie haalt alle participant identities uit het JSONObject.\r\n    private String participantsIDsToWrite(JSONObject object){\r\n        JSONObject playerData = object.getJSONObject(\"player\");\r\n        String accountId = playerData.getString(\"currentAccountId\");\r\n        return accountId;\r\n    }\r\n\r\n    //Deze functie haalt alle participant data uit het JSONObject.\r\n    private String participantsDataToWrite(JSONObject object){\r\n        int participantId = object.getInt(\"participantId\");\r\n        int championId = object.getInt(\"championId\");\r\n        int teamId = object.getInt(\"teamId\");\r\n        int spell1 = object.getInt(\"spell1Id\");\r\n        int spell2 = object.getInt(\"spell2Id\");\r\n        JSONObject playerStats = object.getJSONObject(\"stats\");\r\n        boolean firstBlood;\r\n        try{\r\n            firstBlood = playerStats.getBoolean(\"firstBloodKill\");\r\n        }catch (Exception e){\r\n            firstBlood = false;\r\n        }\r\n        boolean firstInhibitor;\r\n        try{\r\n            firstInhibitor = playerStats.getBoolean(\"firstInhibitorKill\");\r\n        }catch (Exception e){\r\n            firstInhibitor = false;\r\n        }\r\n        boolean firstTower;\r\n        try{\r\n            firstTower = playerStats.getBoolean(\"firstTowerKill\");\r\n        }catch (Exception e){\r\n            firstTower = false;\r\n        }\r\n        int goldEarned = playerStats.getInt(\"goldEarned\");\r\n        int creepKills = playerStats.getInt(\"totalMinionsKilled\");\r\n        int kills = playerStats.getInt(\"kills\");\r\n        int deaths = playerStats.getInt(\"deaths\");\r\n        int assists = playerStats.getInt(\"assists\");\r\n        int item0 = playerStats.getInt(\"item0\");\r\n        int item1 = playerStats.getInt(\"item1\");\r\n        int item2 = playerStats.getInt(\"item2\");\r\n        int item3 = playerStats.getInt(\"item3\");\r\n        int item4 = playerStats.getInt(\"item4\");\r\n        int item5 = playerStats.getInt(\"item5\");\r\n        int item6 = playerStats.getInt(\"item6\");\r\n        long visionScore = playerStats.getLong(\"visionScore\");\r\n\r\n        return  participantId + \",\" + championId + \",\" + teamId + \",\" + spell1 + \",\" + spell2 + \",\" +\r\n                firstBlood + \",\" + firstInhibitor + \",\" + firstTower + \",\" + goldEarned + \",\" + creepKills + \",\" +\r\n                kills + \",\" + deaths + \",\" + assists + \",\" + item0 + \",\" + item1 + \",\" + item2 + \",\" + item3 + \",\" +\r\n                item4 + \",\" + item5 + \",\" + item6 + \",\" + visionScore;\r\n    }\r\n\r\n    private String banData(JSONObject object,String matchID){\r\n        final String lineSep=System.getProperty(\"line.separator\");\r\n        JSONArray bannedChamps = object.getJSONArray(\"bans\");\r\n        String bansToWrite = \"\";\r\n            for(int i = 0 ; i < 5 ; i++){\r\n                try{\r\n                    JSONObject banLoop = bannedChamps.getJSONObject(i);\r\n                    int champID = banLoop.getInt(\"championId\");\r\n                    bansToWrite = bansToWrite + matchID + \",\" + champID + lineSep;\r\n                }catch (Exception e){\r\n                }\r\n            }\r\n        return bansToWrite;\r\n    }\r\n\r\n    private List<String> getMatchList(String file,int matchIDColumn) throws IOException {\r\n        List<String> checkedMatches = new ArrayList<>();\r\n        final String lineSep=System.getProperty(\"line.separator\");\r\n        BufferedReader fileReaderMatchIDs = new BufferedReader(new FileReader(file));\r\n        String readerLine = null;\r\n        String[] readerTokens;\r\n        int count = 0;\r\n\r\n        for (readerLine = fileReaderMatchIDs.readLine(); readerLine != null; readerLine = fileReaderMatchIDs.readLine(),count++){\r\n            readerTokens = readerLine.split(\",\");\r\n\r\n            String matchID = readerTokens[matchIDColumn].replace(\".\",\"\").replace(\"E9\",\"\");\r\n\r\n            if(count > 0){\r\n                if(matchID.length() == 9) matchID = matchID + \"0\";\r\n                if(!checkedMatches.contains(matchID)) checkedMatches.add(matchID);\r\n            }\r\n            System.out.println(count);\r\n        }\r\n\r\n        return checkedMatches;\r\n    }\r\n\r\n    private boolean doesFileExists(String file){\r\n        File tempDir = new File(file);\r\n        return tempDir.exists();\r\n    }\r\n\r\n    //Hoofdfunctie die alle gevraagde data wegschrijft in de CSV files.\r\n    public void writeToOneCSV() throws IOException{\r\n        final String lineSep=System.getProperty(\"line.separator\");\r\n        int lineCountAll = parser.countLines(fileToGetAll);\r\n        System.out.println(lineCountAll);\r\n\r\n        boolean firstRun = !doesFileExists(fileToWrite2);\r\n\r\n        BufferedReader fileReaderMatchIDs = new BufferedReader(new FileReader(fileToGetAll)); //Opent de reader waar de matchIDs uit worden gelezen.\r\n        BufferedWriter fileWriter2 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToWrite2,true))); //open de writer\r\n        BufferedWriter fileWriter3 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToWrite3,true))); //open de writer\r\n        BufferedWriter fileWriter4 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToWrite4,true))); //open de writer\r\n\r\n\r\n        if(firstRun){\r\n            fileWriter2.write(\"matchID,teamID,win,firstBlood,firstRiftHerald,riftHeraldKills,firstBaron,baronKills,\" +\r\n                    \"firstDragon,dragonKills,firstInhib,inhibKills,firstTower,towerKills,matchDurationSeconds\"+lineSep);\r\n            fileWriter3.write(\"matchID,accountID,participantID,championId,teamId,spell1,spell2,firstBlood,firstInhib,firstTower,goldEarned,\" +\r\n                    \"creepKills,kills,deaths,assists,item0,item1,item2,item3,item4,item5,item6,visionScore\"+lineSep);\r\n            fileWriter4.write(\"matchID,bannedChampion\"+lineSep);\r\n            fileWriter2.flush();\r\n            fileWriter3.flush();\r\n            fileWriter4.flush();\r\n        }\r\n\r\n        List<String> checkedMatches = getMatchList(fileToWrite2,0);\r\n        System.out.println(checkedMatches.size());\r\n        List<String> matchesToCheck = getMatchList(fileToGetAll,1);\r\n        System.out.println(matchesToCheck.size());\r\n\r\n        matchesToCheck.removeAll(checkedMatches);\r\n\r\n\r\n        int matchCount = matchesToCheck.size();\r\n        System.out.println(matchCount);\r\n\r\n        int counter = 0;\r\n            for (String matchID:matchesToCheck) {\r\n\r\n\r\n                int tryCount = 0;\r\n                int maxTries = 5;\r\n\r\n                while(tryCount < maxTries){\r\n                    try{\r\n                        parser.sleep(1500); //slaapt 1.5seconden vanwege api limitaties.\r\n                        String urlWhole = \"https://\" + region + \".api.riotgames.com/lol/match/v4/matches/\" + matchID + \"?api_key=\" + apiKey;\r\n                        JSONObject obj = new JSONObject(parser.returnJsonStringFromUrl(urlWhole,\"\"));\r\n\r\n                        JSONArray teamData = obj.getJSONArray(\"teams\");\r\n                        Long matchDuration = obj.getLong(\"gameDuration\");\r\n\r\n                        for(int i = 0;i <= 1;i++){\r\n                            JSONObject object = teamData.getJSONObject(i);\r\n\r\n                            String toWrite2 = matchID + \",\" + teamDataToWrite(object) + \",\" + matchDuration;\r\n                            fileWriter2.write(toWrite2+lineSep);\r\n\r\n                            String toWrite4 = banData(object,matchID);\r\n                            fileWriter4.write(toWrite4);\r\n                        }\r\n\r\n                        JSONArray playerStats = obj.getJSONArray(\"participants\");\r\n                        JSONArray identities = obj.getJSONArray(\"participantIdentities\");\r\n                        for(int i = 0; i <= 9;i++){\r\n                            JSONObject object1 = identities.getJSONObject(i); //Dit pakt een JSONObject uit het array.\r\n                            String accountID = participantsIDsToWrite(object1);\r\n                            JSONObject object = playerStats.getJSONObject(i);\r\n                            String toWrite = matchID + \",\" + accountID + \",\" + participantsDataToWrite(object);\r\n                            fileWriter3.write(toWrite+lineSep);\r\n                        }\r\n\r\n                        counter++;\r\n                        System.out.println(\"Done with: \" + counter + \" out of \" + matchCount);\r\n                        tryCount = maxTries;\r\n\r\n                    }catch (Exception e){\r\n                    parser.sleep(2000);\r\n                    tryCount++;\r\n                    if(tryCount == maxTries)\r\n                        counter++;\r\n                        System.out.println(e.toString());\r\n                }\r\n            }\r\n\r\n            if(counter % 20 == 0){\r\n                fileWriter2.flush();\r\n                fileWriter3.flush();\r\n                fileWriter4.flush();\r\n            }\r\n        }\r\n\r\n        //Sluit alle Writers en de reader.\r\n        fileWriter2.close();\r\n        fileWriter3.close();\r\n        fileWriter4.close();\r\n        fileReaderMatchIDs.close();\r\n   }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/matchv4MatchesByMatchID.java	(revision 76c3c157933e8ef1a4d091382b3db6b6cc4f2e2f)
+++ LoLparser/src/com/LoLDataHarvester/matchv4MatchesByMatchID.java	(date 1587214780515)
@@ -138,6 +138,9 @@
             String matchID = readerTokens[matchIDColumn].replace(".","").replace("E9","");
 
             if(count > 0){
+                while(matchID.length() != 10){
+                    matchID = matchID + "0";
+                }
                 if(matchID.length() == 9) matchID = matchID + "0";
                 if(!checkedMatches.contains(matchID)) checkedMatches.add(matchID);
             }
Index: LoLparser/src/com/LoLDataHarvester/queries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/queries.java	(date 1587216220262)
+++ LoLparser/src/com/LoLDataHarvester/queries.java	(date 1587216220262)
@@ -0,0 +1,61 @@
+package com.LoLDataHarvester;
+
+import java.io.IOException;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Scanner;
+import java.util.regex.Pattern;
+
+public class queries {
+
+    private databaseConnection dbConn;
+
+    public queries(String user, String password, String databaseName , int port, String ipAdress){
+        this.dbConn = new databaseConnection(user, password, databaseName, port, ipAdress);
+        dbConn.connectToDatabaseServer();
+    }
+
+    public void getMeSomeData() throws SQLException, IOException {
+        Statement stmt =dbConn.getConn().createStatement();
+        System.out.println("Geef je query op.");
+        Scanner scanner = new Scanner(System.in);
+        String query = scanner.nextLine();
+        String sql = "SELECT 3 * 5, 3 + 5 AS result";
+
+        String ordering;
+        String table;
+        boolean asc = false;
+        List<String> orderingDesc = Arrays.asList("*meest*","*most*");
+        List<String> orderingAsc = Arrays.asList("*minst*","*least*");
+
+        for (String check: orderingDesc) {
+            if(Pattern.compile(check).matcher(query).matches())
+                asc = true;
+        }
+
+        if(asc){
+            System.out.println("True");
+        }
+
+        if(query.contains("champion") || query.contains("champ")){
+            table = "CHAMPION";
+        }else{
+            table = "SUMMONER";
+        }
+
+        String sqlQuery = "SELECT * FROM " + table + " ORDER BY ??? "; //+ ordering;
+        System.out.println(sqlQuery);
+
+        /*
+        ResultSet rs = stmt.executeQuery(query);
+        while(rs.next())
+        {
+            System.out.println(rs.getString(1));//or rs.getString("column name");
+        }
+        */
+    }
+}
Index: LoLparser/src/com/LoLDataHarvester/appendCSVs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.LoLDataHarvester;\r\n\r\nimport java.io.*;\r\n\r\npublic class appendCSVs {\r\n\r\n    private String apiKey, region;\r\n\r\n    public appendCSVs(String apiKey, String region) {\r\n        this.apiKey = apiKey;\r\n        this.region = region;\r\n    }\r\n\r\n    public void getAllIDs() throws IOException{\r\n        final String lineSep=System.getProperty(\"line.separator\");\r\n        String fileToRead = \"LoLparser/CSVs/AllPlayers.csv\"; //File die uitgelezen moet worden\r\n        String fileToWrite = \"LoLparser/CSVs/AllPlayersWithIDs.csv\"; //File waar de nieuwe data heen moet\r\n        BufferedReader fileReader = new BufferedReader(new FileReader(fileToRead)); //opent de reader\r\n        BufferedWriter fileWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileToWrite))); //opent de writer\r\n        int lineCount = parser.countLines(fileToRead); //telt het aantal regels van de readfile zodat ik progressie naar de console kan schrijven\r\n        String line = null;\r\n        String[] tokens;\r\n        int i = 0;\r\n\r\n        //moet line != null zijn, voor test purpose i < 3\r\n        for ( line = fileReader.readLine(); line != null; line = fileReader.readLine(),i++)\r\n        {\r\n            int tryCount = 0;\r\n            int maxTries = 5;\r\n\r\n            tokens = line.split(\",\");\r\n            String summoner = tokens[4].trim().substring(1,tokens[4].trim().length() - 1);//haalt de summonerid op en trimt deze voor de url\r\n\r\n            while(tryCount < maxTries){\r\n                try{\r\n                    parser.sleep(1500); //slaapt 1.5seconden vanwege api limitaties.\r\n                    if(i > 0){\r\n                        String url = \"https://\" + region + \".api.riotgames.com/lol/summoner/v4/summoners/\" + summoner + \"?api_key=\" + apiKey; //url voor summoner data\r\n                        String accountID = parser.getAccountID(url); //haalt het accountID op van de summoner\r\n                        fileWriter.write(line+\",\"+accountID+lineSep); //maakt een nieuwe regel en schrijft deze in het nieuwe bestand.\r\n                    }else{\r\n                        fileWriter.write(line+\",/AccountID/SummonerLevel\"+lineSep); //als het de eerste regel van de file is wordt er een nieuwe kolom ingevoegd.\r\n                    }\r\n                    System.out.println(\"Done with: \" + (i+1) + \" out of \" + lineCount); //print de progressie in je console.\r\n                    tryCount = maxTries;\r\n                }catch (Exception e){\r\n                    parser.sleep(2000);\r\n                    tryCount++;\r\n                    if(tryCount == maxTries) System.out.println(e.toString());\r\n                }\r\n            }\r\n        }\r\n        fileWriter.close(); //sluit de reader en writer.\r\n        fileReader.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LoLparser/src/com/LoLDataHarvester/appendCSVs.java	(revision 76c3c157933e8ef1a4d091382b3db6b6cc4f2e2f)
+++ LoLparser/src/com/LoLDataHarvester/appendCSVs.java	(date 1587212743047)
@@ -39,7 +39,7 @@
                         String accountID = parser.getAccountID(url); //haalt het accountID op van de summoner
                         fileWriter.write(line+","+accountID+lineSep); //maakt een nieuwe regel en schrijft deze in het nieuwe bestand.
                     }else{
-                        fileWriter.write(line+",/AccountID/SummonerLevel"+lineSep); //als het de eerste regel van de file is wordt er een nieuwe kolom ingevoegd.
+                        fileWriter.write(line+",/AccountID,/SummonerLevel"+lineSep); //als het de eerste regel van de file is wordt er een nieuwe kolom ingevoegd.
                     }
                     System.out.println("Done with: " + (i+1) + " out of " + lineCount); //print de progressie in je console.
                     tryCount = maxTries;
